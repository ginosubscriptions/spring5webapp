openapi: 3.0.2
info:
  version: '1.0'
  title: OpenAPI Course
  description: Specification for OpenAPI Course
  termsOfService: http://example.com/terms/
  contact:
    name: Gino Vicari
    url: https://springframework.guru
    email: cuicui@bidon.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers: 
  - url: https://dev.example.com
    description: Development Server
  - url: https://qa.example.com
    description: QA Server
  - url: https://prod.examples.com
    description: Production Server
paths:
  /v1/customers:
    get:
      summary: List Customers
      description: Get a list of **Customers** in the system.
      tags:
        - Customers
      operationId: listCustomersV1
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of Customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersPagedList'
    post:
      summary: New Customer
      description: Create a new **Customer**.
      tags:
        - Customers
      operationId: createCustomerV1
      requestBody:
        required: true
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created
          headers:
            Location:
              description: Location of the created Customer
              schema:
                type: string
                format: uri
                example: http://example.com/v1/customers/{assignedIdValue}
        '400':
          $ref: '#/components/responses/badRequest'
        '409':
          $ref: '#/components/responses/conflict'
  /v1/customers/{customerId}:
    get:
      summary: Get Customer
      description: Get a **Customer** by its **Id** value.
      tags:
        - Customers
      operationId: getCustomerV1
      parameters:
        - $ref: '#/components/parameters/CustomerId'
      responses:
        '200':
          description: Found Customer corresponding with given Customer Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          $ref: '#/components/responses/customerNotFound'
    put:
      summary: Update Customer
      description: Update a **Customer** by its **Id** value.
      tags:
        - Customers
      operationId: updateCustomerV1
      parameters:
        - $ref: '#/components/parameters/CustomerId'
      requestBody:
        required: true
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '204':
          description: Customer updated
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/customerNotFound'
        '409':
          $ref: '#/components/responses/conflict'
    delete:
      summary: Delete Customer
      description: Delete a **Customer** by its **Id** value.
      tags:
        - Customers
      operationId: deleteCustomerV1
      parameters:
        - $ref: '#/components/parameters/CustomerId'
      responses:
        '200':
          description: Customer deleted
        '404':
          $ref: '#/components/responses/customerNotFound'
  /v1/{customerId}/orders:
    post:
      summary: Place Order
      description: Place **Order** for **Customer** with the given **Customer Id** value.
      tags:
        - Orders
      operationId: createOrderV1
      parameters:
        - $ref: '#/components/parameters/CustomerId'
      requestBody:
        required: false
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/BeerOrder'
      responses:
        '204':
          description: Order created
          headers:
            Location:
              description: Location of the created Order
              schema:
                type: string
                format: uri
                example: http://example.com/v1/{customerId}/orders/{assignedIdValue}
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/customerNotFound'
        '409':
          $ref: '#/components/responses/conflict'
      callbacks:
        orderStatusChange:
          '${request.body#/orderStatusCallbackUrl}':
            post:
              description: "Webhook for order status change notifications"
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/OrderStatusChangeNotification'
              responses:
                '200':
                  description: Successful
  /v1/beers:
    get:
      summary: List Beers
      description: Get a list of **Beers** in the system.
      tags:
        - Beers
      operationId: listBeersV1
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeerPagedList'
      security: []
    post:
      summary: New Beer
      description: Create a new **Beer**.
      tags:
        - Beers
      operationId: createBeerV1
      requestBody:
        required: true
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/Beer'
      responses:
        '201':
          description: Beer created
          headers:
            Location:
              description: Location of the created Beer
              schema:
                type: string
                format: uri
                example: http://example.com/v1/beers/{assignedIdValue}
        '400':
          $ref: '#/components/responses/badRequest'
        '409':
          $ref: '#/components/responses/conflict'
  /v1/beers/{beerId}:
    get:
      summary: Get Beer by Id
      description: Get a **Beer** by its **Id** value.
      tags:
        - Beers
      operationId: getBeerV1
      parameters:
        - $ref: '#/components/parameters/BeerId'
      responses:
        '200':
          description: Found Beer corresponding with given Beer Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
        '404':
          $ref: '#/components/responses/beerNotFound'
      security: []
    put:
      summary: Update Beer
      description: Update a **Beer** by its **Id** value.
      tags:
        - Beers
      operationId: updateBeerV1
      parameters:
        - $ref: '#/components/parameters/BeerId'
      requestBody:
        required: true
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/Beer'
      responses:
        '204':
          description: Beer updated
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/beerNotFound'
        '409':
          $ref: '#/components/responses/conflict'
    delete:
      summary: Delete Beer
      description: Delete a **Beer** by its **Id** value.
      tags:
        - Beers
      operationId: deleteBeerV1
      parameters:
        - $ref: '#/components/parameters/BeerId'
      responses:
        '200':
          description: Beer deleted
        '404':
          $ref: '#/components/responses/beerNotFound'
security:
  - BasicAuth: []
  - JwtAuthToken: []
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    JwtAuthToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PageNumber:
      name: pageNumber
      in: query
      description: Page Number
      schema:
        type: integer
        format: int32
        default: 1
    PageSize:
      name: pageSize
      in: query
      description: Page Size
      required: false
      schema:
        type: integer
        format: int32
        default: 25
    CustomerId:
      name: customerId
      in: path
      description: Customer Id
      required: true
      schema:
        type: string
        format: uuid
    BeerId:
      name: beerId
      in: path
      description: Beer Id
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
          example: 123 main
        city:
          type: string
          example: St Pete
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 Letter State Code
          # enum: [AL, AK, AZ, AR, CA]
          enum: 
            - AL
            - AK
            - AZ
            - AR
            - CA
        zipCode:
          type: string
          example: 33701
    Customer:
      type: object
      description: Customer Object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firsName:
          type: string
          minLength: 2
          maxLength: 100
          example: John
        lastName:
          type: string
          minLength: 2
          maxLength: 100
          example: Thompson
        address:
          $ref: '#/components/schemas/Address'
        emailAddresses:
          type: array
          items:
            type: string
            format: email
    Customers:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Customers
      items:
        $ref: '#/components/schemas/Customer'
    CustomersPagedList:
      type: object
      allOf:
        - $ref: '#/components/schemas/PagedResponse'
      properties:
        content:
          $ref: '#/components/schemas/Customers'
    Brewery:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the brewery
          example: The Super Duper Brewery
        location:
          type: string
          minLength: 1
          maxLength: 100
          description: Municipality in which the brewery is located
          example: Duper Town
    Beer:
      type: object
      description: Beer Object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Beer brand name
          example: Super Duper
        style:
          type: string
          enum:
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
            - LAGER
          description: Type of beer
        upc:
          type: string
          example: 124365748374
          minLength: 12
          maxLength: 12
          description: 12 character product code
        price:
          type: number
          format: float
          multipleOf: 0.01
          description: Price per Unit
          example: 5.99
        quantityOnHand:
          type: integer
          format: int32
          description: Beers available in stock
          example: 12
        brewery:
          $ref: '#/components/schemas/Brewery'
    Beers:
      type: array
      items:
        $ref: '#/components/schemas/Beer'
    BeerPagedList:
      type: object
      allOf:
        - $ref: '#/components/schemas/PagedResponse'
      properties:
        content:
          $ref: '#/components/schemas/Beers'
    BeerOrder:
      required:
        - customerId
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
        customerId:
          type: string
          format: uuid
        customerRef:
          type: string
          nullable: true
        beerOrderLines:
          type: array
          items:
            $ref: '#/components/schemas/BeerOrderLine'
        orderStatusCallbackUrl:
          type: string
          format: url
          example: http://example.com/v1/{customerId}/orders/{orderId}/status
    BeerOrderLine:
      required:
        - orderQuantity
        - upc
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
        beerId:
          type: string
          format: uuid
          readOnly: true
        upc:
          type: string
        orderQuantity:
          maximum: 999
          minimum: 1
          type: integer
        quantityAllocated:
          type: integer
          nullable: true
          readOnly: true
    OrderStatusChangeNotification:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        orderStatus:
          type: string
          example: SHIPPED
    PagedResponse:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/PagedResponsePageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponsePageableSort'
        first:
          type: boolean
    PagedResponsePageableSort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponsePageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponsePageableSort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
  responses:
    badRequest:
      description: Bad Request
    conflict:
      description: Conflict
    customerNotFound:
      description: Customer not found for the given Customer Id
    beerNotFound:
      description: Beer not found for the given Beer Id
